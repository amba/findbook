#!/usr/bin/perl
# FIXME: performance of File::Find?
use 5.014;
use warnings;
use strict;
use utf8;
use Getopt::Long qw/:config no_ignore_case bundling/;
use Encode;
use File::Basename;
use File::Glob ':bsd_glob';
use Unicode::Normalize qw/NFD/;

# we prefer YAML::XS over YAML::Tiny
my $have_yaml_xs = 0;
eval 'use YAML::XS; $have_yaml_xs = 1; 1;'
    or eval 'use YAML::Tiny; 1'
    or die "error: no YAML module. See README for help.\n$@\n";

binmode STDOUT, ':encoding(UTF-8)';
binmode STDIN, ':encoding(UTF-8)';
binmode STDERR, ':encoding(UTF-8)';

# kchmviewer fails for german locale
#$ENV{LANG} = undef;

my $prog_name = basename ($0);
my $fallback_viewer = "evince";
my $config_file = "$ENV{HOME}/.config/findbook.yml";
my $search_all_formats = 0;
my $case_sensitive = 0;
my $match_fixed_strings = 0;
my $match_paths = 0;
my $use_glob = 0;
my $argv0;
my $viewer = '';
my $print_help = 0;
my $print_version = 0;
my $push = 0;
my $pull = 0;


my $config;
my @dirs = ();
my $have_formats = 0;
my %format_hash;

# parse commandline

@ARGV = map decode ('UTF-8', $_), @ARGV;

sub state_usage {
    say "Usage: $prog_name [OPTIONS] PATTERN1 [PATTERN2 ...]";
}

sub state_help {
    state_usage ();
        say "
find and view ebooks on your hard drive.

List all filenames matching each of the regular expressions PATTERN*. 
The user can then select and view one of the matching files.

 Options:
  -g, --glob                  speed up operation by using PATTERN1 as a glob
                              like this: \"\$DIR/*\$PATTERN1*\". See
                              'perldoc File::Glob' for the list of allowed meta
                              characters.
  -a, --all-formats           list all file formats, not only those given in
                              the configuration file.
  -F, --fixed-strings         match against fixed strings, not regular
                              expressions.        
  -i, --case-sensitive        do not ignore case distinctions in filenames.
  -p, --paths                 match against full paths, not basenames.
  -v, --viewer=VIEWER         use VIEWER. overrides the config file.

  -d, --directory=DIR         search DIR, not the ones in the configuration
                              file. You can repeat this option, like 
                              ' -d DIR1 -d DIR2 ...' to search multiple
                              directories.
  -f, --file=FILE             read configuration from FILE.
                              default: ~/.config/findbook.yml
      --pull                  sync with a remote directory.
      --push                                    
  -h, --help                  give this help screen.
  -V, --version               print program version.

FIXME: Report bugs to...";
    
}

GetOptions ("viewer|v=s" => \$viewer,
	    "all-formats|a" => \$search_all_formats,
	    "case-sensitive|i" => \$case_sensitive,
	    "fixed-strings|F" => \$match_fixed_strings,
	    "paths|p" => \$match_paths,
	    "glob|g" => \$use_glob,
	    "directory|d=s" => \@dirs,
	    "file|f=s" => \$config_file,
	    "help|h" => \$print_help,
	    "version|V" => \$print_version,
	    "push" => \$push,
	    "pull" => \$pull,
    )    or exit 1;

if ($print_help) {
    state_help ();
    exit 0;
}
if ($print_version) {
    state_version ();
    exit 0;
}

if (!($push || $pull) && ($#ARGV  == -1)) {
    state_usage ();
    die "error: need at least one non-option argument\n";
}

if ($use_glob) {
    # do not run $ARGV[0] through NFD ()
    $argv0 = shift @ARGV;
}

@ARGV = map NFD ($_), @ARGV;

# read in and parse configuration file
# FIXME: config for case sensitive and glob
$config = load_file ($config_file);

sub is_hash {
    my $ref = shift;
    return ref $ref eq "HASH";
}

sub is_array {
    my $ref = shift;
    return ref $ref eq "ARRAY";
}


die "config file must be a mapping\n" if !is_hash ($config);

if ($push || $pull) {
    die "value of 'sync' must be a hash" if ! is_hash ($config->{sync});
    my %sync_hash = %{$config->{sync}};
    foreach my $local_dir (keys %sync_hash) {
	my $remote = $sync_hash{$local_dir};
	die "remote not a scalar" if ref $remote;
	my @command = qw/rsync -azP/;
	say "push: $push, pull: $pull";
	if ($push) {
	    push @command, $local_dir, $remote;
	}
	else {
	    push @command, ($remote, $local_dir);
	}
	
	system_wrapper (@command);
    }
    exit 0;
}
    
if (! @dirs) {
    die "no search directory in config"  if !$config->{dirs};
    die "value of 'dirs' must be a list" if !is_array ($config->{dirs});
    @dirs = @{$config->{dirs}};
    die "value of 'dirs' must be a non-empty list" if scalar @dirs < 1;
}
$fallback_viewer = $config->{"default-viewer"} if $config->{"default-viewer"};

if ($config->{formats}) {
    die "value of 'formats' must be a hash"
	if !is_hash ($config->{formats});
    my %viewer_hash = %{$config->{formats}};
    for my $key (keys %viewer_hash) {
	for my $extension (@{$viewer_hash{$key}}) {
	    die "file format '$extension' listed more than once in" .
		" 'format' hash\n"
		if $format_hash{$extension};
	    $format_hash{$extension} = $key;
	}
    }
    $have_formats = scalar keys %format_hash;
    
}

my @files;

# glob for each file format
my $format_glob = '';
if ($have_formats && !$search_all_formats) {
    my @formats = map quotemeta, keys %format_hash;
    $format_glob = "{" . join (',', @formats) . "}";
}

for my $directory (@dirs) {
    if ($use_glob) {
	# use bsd_glob
	my $glob = "${directory}/*${argv0}*";
	
	push @files, bsd_glob ($glob, GLOB_BRACE | GLOB_QUOTE
			       | ($case_sensitive ? 0 : GLOB_NOCASE));
	say "glob: '$glob', number: $#files";
	if (GLOB_ERROR) {
	    die "error from bsd_glob: $!\n";
	}
	
	# we did not glob for the formats, because time of the glob seems to
	# increase linear with the number of formats. Instead we will later
	# add them to @ARGV. 
    }
    else {
	push @files, glob ("\Q${directory}\E/*${format_glob}");
    }
}

# for each file we create a hashref with:
# filename: unmodified file path
# nfd_filename: canonical decomposition of filename;
# basename: basename of nfd_filename
@files = map decode ('UTF-8', $_), @files;
@files = map {
    my $nfd_filename = NFD ($_);
    {
	filename => $_,
	nfd_filename => $nfd_filename,
	basename => basename ($nfd_filename)
    };
} @files;

# setup regular expressions

if ($match_fixed_strings) {
    if ($case_sensitive) {
	@ARGV = map qr/\Q$_\E/, @ARGV;
    }
    else {
	@ARGV = map qr/\Q$_\E/i, @ARGV;
    }
}
else {
    eval {
	if ($case_sensitive) {
	    @ARGV = map qr/$_/, @ARGV;
	}
	else {
	    @ARGV = map qr/$_/i, @ARGV;
	}
    };
    die "invalid regex: $@" if $@;
}


if ($use_glob && $have_formats && !$search_all_formats) {
    my @formats = map quotemeta, keys %format_hash;
    my $regex = "(?:" . join ('|', @formats) . ')$';
    say "regex: ", qr/$regex/;
    # this should always be case sensitive
    push @ARGV, qr/$regex/;
}


# grep the list of filenames for each regexp
for my $regex (@ARGV) {
    @files = grep {
	if ($match_paths) {
	    $_->{nfd_filename} =~ /$regex/;
	}
	else {
	    $_->{basename} =~ /$regex/;
	}
    } @files;
}

die "error: no book found\n" if $#files == -1;

# check for duplicate basenames
my %duplicates;
my $have_duplicates = 0;
for (@files) {
    if ($duplicates{$_->{basename}}++) {
	$have_duplicates = 1;
	last;
    }
}

# present the list of matching files to the user

if ($have_duplicates) {
    
    say "[$_] ", $files[$_]{filename} for (0..$#files); 
}
else {    
    say "[$_] ", $files[$_]{basename} for (0..$#files); 
}

# get user input

my $input;
if ($#files == 0) {	# unique search result
    $input = 0;
}
else {
    say "press number 0-$#files or  q to quit";
    $input = <STDIN>;
    chomp($input);
    exit 0 if $input =~ /\Aq\Z/;
    $input = "0" if $input eq "";
    if ($input < 0 || $input > $#files) {
	die "error: number out of range\n";
    }
}

if (!$viewer) {
    # no command line option 'v' given.
    # search the format hash for a viewer.
    for my $format (keys %format_hash) {
	if ($files[$input]{filename} =~ /\Q$format\E$/) {
	    $viewer = $format_hash{$format}
	}
    }
    if (!$viewer) {
	$viewer = $fallback_viewer;
    }
}
my @command = ($viewer, $files[$input]{filename});
system_wrapper (@command);

sub system_wrapper {
    say "command: @_";
    system (@_) == 0
	or die "error: system failed: $?\n"
}



sub state_version {
    say "findbook 0.1
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law."
}

# load YAML file
sub load_file {
    my $filename = shift;
    open my $fh, $filename
	or die "Cannot open '$filename' for input:\n$!\n";
    my $string = do { local $/; local $_ = <$fh>};
    
    if (!$have_yaml_xs) {
	# YAML::Tiny's Load needs a perl unicode string 
	$string = decode ('UTF-8', $string);
    }
    
    return Load ($string);
}

